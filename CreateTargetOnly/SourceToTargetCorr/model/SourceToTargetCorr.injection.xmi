<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;source&quot;, source);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;source&quot;,source);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;source&quot;, source);&#xA;ruleresult.registerObject(&quot;target&quot;, target);&#xA;ruleresult.registerObject(&quot;sourceToTarget&quot;, sourceToTarget);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;source&quot;).eClass().equals(Source.SourcePackage.eINSTANCE.getSourceModel());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;target&quot;, target);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;target&quot;,target);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;source&quot;, source);&#xA;ruleresult.registerObject(&quot;target&quot;, target);&#xA;ruleresult.registerObject(&quot;sourceToTarget&quot;, sourceToTarget);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;target&quot;).eClass().equals(Target.TargetPackage.eINSTANCE.getTargetModel());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sm&quot;, sm);&#xA;match.registerObject(&quot;a&quot;, a);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_a_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;a.id&quot;, true, csp);&#xD;&#xA;var_a_id.setValue(a.getId());&#xD;&#xA;var_a_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_s_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;s.id&quot;, csp);&#xD;&#xA;var_s_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_a_id,var_s_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;a&quot;,a);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;aToS&quot;, aToS);&#xA;ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;a&quot;, a);&#xA;ruleresult.registerObject(&quot;s&quot;, s);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;a&quot;).eClass().equals(Source.SourcePackage.eINSTANCE.getActivity());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tm&quot;, tm);&#xA;match.registerObject(&quot;s&quot;, s);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_s_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;s.id&quot;, true, csp);&#xD;&#xA;var_s_id.setValue(s.getId());&#xD;&#xA;var_s_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_a_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;a.id&quot;, csp);&#xD;&#xA;var_a_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_a_id,var_s_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s&quot;,s);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;aToS&quot;, aToS);&#xA;ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;a&quot;, a);&#xA;ruleresult.registerObject(&quot;s&quot;, s);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;s&quot;).eClass().equals(Target.TargetPackage.eINSTANCE.getStep());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sm&quot;, sm);&#xA;match.registerObject(&quot;spM&quot;, spM);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spM_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spM.id&quot;, true, csp);&#xD;&#xA;var_spM_id.setValue(spM.getId());&#xD;&#xA;var_spM_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spS_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spS.id&quot;, csp);&#xD;&#xA;var_spS_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spM_id,var_spS_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spM&quot;,spM);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;spM&quot;, spM);&#xA;ruleresult.registerObject(&quot;spS&quot;, spS);&#xA;ruleresult.registerObject(&quot;spMToSpS&quot;, spMToSpS);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;spM&quot;).eClass().equals(Source.SourcePackage.eINSTANCE.getSplitMerge());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;tm&quot;, tm);&#xA;match.registerObject(&quot;spS&quot;, spS);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spS_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spS.id&quot;, true, csp);&#xD;&#xA;var_spS_id.setValue(spS.getId());&#xD;&#xA;var_spS_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spM_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spM.id&quot;, csp);&#xD;&#xA;var_spM_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spM_id,var_spS_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spS&quot;,spS);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;spM&quot;, spM);&#xA;ruleresult.registerObject(&quot;spS&quot;, spS);&#xA;ruleresult.registerObject(&quot;spMToSpS&quot;, spMToSpS);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;spS&quot;).eClass().equals(Target.TargetPackage.eINSTANCE.getSpecialStep());">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sm&quot;, sm);&#xA;match.registerObject(&quot;e2&quot;, e2);&#xA;match.registerObject(&quot;e1&quot;, e1);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2&quot;,e2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s1&quot;,s1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1&quot;,e1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1ToS1&quot;,e1ToS1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2ToS2&quot;,e2ToS2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s2&quot;,s2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;e2&quot;, e2);&#xA;ruleresult.registerObject(&quot;s1&quot;, s1);&#xA;ruleresult.registerObject(&quot;e1&quot;, e1);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;e1ToS1&quot;, e1ToS1);&#xA;ruleresult.registerObject(&quot;e2ToS2&quot;, e2ToS2);&#xA;ruleresult.registerObject(&quot;s2&quot;, s2);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;s1&quot;, s1);&#xA;match.registerObject(&quot;tm&quot;, tm);&#xA;match.registerObject(&quot;s2&quot;, s2);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2&quot;,e2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s1&quot;,s1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1&quot;,e1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1ToS1&quot;,e1ToS1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2ToS2&quot;,e2ToS2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s2&quot;,s2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sm&quot;, sm);&#xA;ruleresult.registerObject(&quot;e2&quot;, e2);&#xA;ruleresult.registerObject(&quot;s1&quot;, s1);&#xA;ruleresult.registerObject(&quot;e1&quot;, e1);&#xA;ruleresult.registerObject(&quot;tm&quot;, tm);&#xA;ruleresult.registerObject(&quot;smToTm&quot;, smToTm);&#xA;ruleresult.registerObject(&quot;e1ToS1&quot;, e1ToS1);&#xA;ruleresult.registerObject(&quot;e2ToS2&quot;, e2ToS2);&#xA;ruleresult.registerObject(&quot;s2&quot;, s2);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spm1_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm1.merge&quot;, true, csp);&#xD;&#xA;var_spm1_merge.setValue(spm1.isMerge());&#xD;&#xA;var_spm1_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_spm2_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm2.merge&quot;, true, csp);&#xD;&#xA;var_spm2_merge.setValue(spm2.isMerge());&#xD;&#xA;var_spm2_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_false = CSPFactoryHelper.eINSTANCE.createVariable(&quot;false&quot;, csp);&#xD;&#xA;var_false.setType(&quot;boolean&quot;);&#xD;&#xA;Variable var_true = CSPFactoryHelper.eINSTANCE.createVariable(&quot;true&quot;, csp);&#xD;&#xA;var_true.setType(&quot;boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spm1_merge,var_false);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_spm2_merge,var_true);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;spm2&quot;, spm2);&#xA;match.registerObject(&quot;spm1&quot;, spm1);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps2&quot;,sps2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps1&quot;,sps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2&quot;,spm2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1&quot;,spm1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1ToSps1&quot;,spm1ToSps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2ToSps2&quot;,spm2ToSps2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sps2&quot;, sps2);&#xA;ruleresult.registerObject(&quot;sps1&quot;, sps1);&#xA;ruleresult.registerObject(&quot;spm2&quot;, spm2);&#xA;ruleresult.registerObject(&quot;spm1&quot;, spm1);&#xA;ruleresult.registerObject(&quot;spm1ToSps1&quot;, spm1ToSps1);&#xA;ruleresult.registerObject(&quot;spm2ToSps2&quot;, spm2ToSps2);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;sps2&quot;, sps2);&#xA;match.registerObject(&quot;sps1&quot;, sps1);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spm1_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm1.merge&quot;, true, csp);&#xD;&#xA;var_spm1_merge.setValue(spm1.isMerge());&#xD;&#xA;var_spm1_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_spm2_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm2.merge&quot;, true, csp);&#xD;&#xA;var_spm2_merge.setValue(spm2.isMerge());&#xD;&#xA;var_spm2_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_false = CSPFactoryHelper.eINSTANCE.createVariable(&quot;false&quot;, csp);&#xD;&#xA;var_false.setType(&quot;boolean&quot;);&#xD;&#xA;Variable var_true = CSPFactoryHelper.eINSTANCE.createVariable(&quot;true&quot;, csp);&#xD;&#xA;var_true.setType(&quot;boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spm1_merge,var_false);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_spm2_merge,var_true);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps2&quot;,sps2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps1&quot;,sps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2&quot;,spm2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1&quot;,spm1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1ToSps1&quot;,spm1ToSps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2ToSps2&quot;,spm2ToSps2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;sps2&quot;, sps2);&#xA;ruleresult.registerObject(&quot;sps1&quot;, sps1);&#xA;ruleresult.registerObject(&quot;spm2&quot;, spm2);&#xA;ruleresult.registerObject(&quot;spm1&quot;, spm1);&#xA;ruleresult.registerObject(&quot;spm1ToSps1&quot;, spm1ToSps1);&#xA;ruleresult.registerObject(&quot;spm2ToSps2&quot;, spm2ToSps2);&#xA;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="throw new UnsupportedOperationException(&quot;developments on attribute synchronization with eMoflon not yet completed&quot;);">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_a_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;a.id&quot;, csp);&#xD;&#xA;var_a_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_s_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;s.id&quot;, csp);&#xD;&#xA;var_s_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_a_id,var_s_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_spM_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spM.id&quot;, csp);&#xD;&#xA;var_spM_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_spS_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spS.id&quot;, csp);&#xD;&#xA;var_spS_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spM_id,var_spS_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sm&quot;,sm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2&quot;,e2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s1&quot;,s1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1&quot;,e1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;tm&quot;,tm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;smToTm&quot;,smToTm);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e1ToS1&quot;,e1ToS1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;e2ToS2&quot;,e2ToS2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;s2&quot;,s2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_spm1_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm1.merge&quot;, true, csp);&#xD;&#xA;var_spm1_merge.setValue(spm1.isMerge());&#xD;&#xA;var_spm1_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;Variable var_spm2_merge = CSPFactoryHelper.eINSTANCE.createVariable(&quot;spm2.merge&quot;, true, csp);&#xD;&#xA;var_spm2_merge.setValue(spm2.isMerge());&#xD;&#xA;var_spm2_merge.setType(&quot;Boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_false = CSPFactoryHelper.eINSTANCE.createVariable(&quot;false&quot;, csp);&#xD;&#xA;var_false.setType(&quot;boolean&quot;);&#xD;&#xA;Variable var_true = CSPFactoryHelper.eINSTANCE.createVariable(&quot;true&quot;, csp);&#xD;&#xA;var_true.setType(&quot;boolean&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_spm1_merge,var_false);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_spm2_merge,var_true);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps2&quot;,sps2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sps1&quot;,sps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2&quot;,spm2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1&quot;,spm1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm1ToSps1&quot;,spm1ToSps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;spm2ToSps2&quot;,spm2ToSps2);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/Class1"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/A2SRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/SpM2SpSRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/NextRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/SourceToTargetCorr/model/SourceToTargetCorr.ecore#//Rules/ContinueFixRule"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
